// Generated by CoffeeScript 1.3.3
var Base, util, _;

util = require('util');

_ = require('underscore');

Base = (function() {

  function Base() {}

  Base.prototype["super"] = function(method) {
    var args, super_, val;
    super_ = this.constructor.super_;
    if (!super_) {
      throw new Error('Does not have a super class');
    }
    if (!_(method).isString()) {
      args = _(method).isArguments() ? method : arguments;
      method = super_;
    } else {
      method = super_.prototype[method];
      args = Array.prototype.slice.call(arguments, 1);
      if (_(args[0]).isArguments()) {
        args = args[0];
      }
    }
    this.constructor.super_ = super_.super_;
    val = method.apply(this, args);
    this.constructor.super_ = super_;
    return val;
  };

  Base.extend = function(child, parent, proto, clsProps) {
    if (!_(parent).isFunction()) {
      clsProps = proto;
      proto = parent;
      parent = Base;
    }
    if (!_(proto).isObject()) {
      proto = {};
    }
    if (!_(clsProps).isObject()) {
      clsProps = {};
    }
    util.inherits(child, parent);
    _(child.prototype).extend(proto);
    _(child).extend(clsProps);
    return child;
  };

  return Base;

})();

module.exports = Base;
